updateR()
library(Amelia)
library(ggplot2) #carregar antes do caret
library(lattice) #carregar antes do caret
library(caret)
library(dplyr)
library(reshape)
library(randomForest)
library(e1071)
setwd("C:/Users/BRUNO/Google Drive/Estudos/PowerBI/Capitulo15")
dados_clientes <- read.csv("dados/dataset.csv")
dados_clientes$ID <- NULL #Exclui a coluna
colnames(dados_clientes)[24] <- "inadimplente" #renomeia a coluna
colnames(dados_clientes)[2] <- "Genero" #Sex
colnames(dados_clientes)[3] <- "Escolaridade" #Education
colnames(dados_clientes)[4] <- "Estado_Civil" #Marriage
colnames(dados_clientes)[5] <- "Idade" #Age
dados_clientes$Genero <- cut(dados_clientes$Genero, #variavel a ser convertida
c(0,1,2), #valores atuais da variavel
labels = c("Masculino", "Feminino")
dados_clientes$Escolaridade <- cut(dados_clientes$Escolaridade,
c(0,1,2,3,4),
labels = c("Pos Graduado",
"Graduado",
"Ensino Medio",
"Outros"))
dados_clientes$Escolaridade <- cut(dados_clientes$Escolaridade,
c(0,1,2,3,4),
labels = c("Pos Graduado",
"Graduado",
"Ensino Medio",
"Outros"))
dados_clientes$Estado_Civil <- cut(dados_clientes$Estado_Civil,
c(-1,0,1,2,3),
labels = c("Desconhecido", #categoria dos nao identificados
"Casado",
"Solteiro",
"Outro"))
dados_clientes$Idade <- cut(dados_clientes$Idade,
c(0,30,50,100), #limites superiores das faixas etarias
labels = c("Jovem",
"Adulto",
"Idoso"))
dados_clientes$PAY_0 <- as.factor(dados_clientes$PAY_0)
dados_clientes$PAY_2 <- as.factor(dados_clientes$PAY_2)
dados_clientes$PAY_3 <- as.factor(dados_clientes$PAY_3)
dados_clientes$PAY_4 <- as.factor(dados_clientes$PAY_4)
dados_clientes$PAY_5 <- as.factor(dados_clientes$PAY_5)
dados_clientes$PAY_6 <- as.factor(dados_clientes$PAY_6)
dados_clientes <- na.omit(dados_clientes)
dados_clientes$inadimplente <- as.factor(dados_clientes$inadimplente)
set.seed(12345)
indice <- createDataPartition(dados_clientes$inadimplente, #seleciona a variavel filtro/target
p = 0.75, #indica a proporcao de dados de treino
list = FALSE)
dados_treino <- dados_clientes[indice,]
dados_teste <- dados_clientes[-indice,]
modelo_v1 <- randomForest(inadimplente ~ ., data = dados_treino)
previsoes_v1 <- predict(modelo_v1, dados_teste)
cm_v1 <- caret::confusionMatrix(previsoes_v1, dados_teste$inadimplente, positive = "1")
y <- dados_teste$inadimplente #observacoes reais
y_pred_v1 <- previsoes_v1 #valores previstos
precision_v1 <- posPredValue(y_pred_v1, y) #calcula a precisao do modelo
recall_v1 <- sensitivity(y_pred_v1, y) #calcula o recall do modelo
F1_v1 <- (2 * precision_v1 * recall_v1) / (precision + recall)
recall_v1 <- sensitivity(y_pred_v1, y)
F1_v1 <- (2 * precision_v1 * recall_v1) / (precision + recall)
F1_v1 <- (2 * precision_v1 * recall_v1) / (precision_v1 + recall_v1)
library(DMwR)
set.seed(9560)
dados_treino_bal <- SMOTE(inadimplente ~ ., data = dados_treino)
modelo_v2 <- randomForest(inadimplente ~ ., data = dados_treino_bal)
previsoes_v2 <- predict(modelo_v2, dados_teste)
cm_v2 <- caret::confusionMatrix(previsoes_v2, dados_teste$inadimplente, positive = "1")
y <- dados_teste$inadimplente
y_pred_v2 <- previsoes_v2
precision_v2 <- posPredValue(y_pred_v2, y)
precision_v2
recall_v2 <- sensitivity(y_pred_v2, y)
recall_v2
F1_v2 <- (2 * precision_v2 * recall_v2) / (precision_v2 + recall_v2)
var_precision <- (precision_v2 / precision_v1) - 1
var_recall <- (recall_v2 / recall_v1) - 1
var_F1 <- (F1_v2 / F1_v1) - 1
compara_modelos <- cbind(c(precision_v1, recall_v1, F1_v1),
c(precision_v2, recall_v2, F1_v2),
c(var_precision, var_recall, var_F1))
colnames(compara_modelos) <- c("Modelo v1","Modelo v2", "Variacoes")
rownames(compara_modelos)
var_precision <- (precision_v2 / precision_v1) - 1
var_recall <- (recall_v2 / recall_v1) - 1
var_F1 <- (F1_v2 / F1_v1) - 1
compara_modelos <- cbind(c(precision_v1, recall_v1, F1_v1),
c(precision_v2, recall_v2, F1_v2),
c(var_precision, var_recall, var_F1))
colnames(compara_modelos) <- c("Modelo v1","Modelo v2", "Variacoes")
rownames(compara_modelos) <- c("Precision", "Recall", "F1-score")
compara_modelos
varImpPlot(modelo_v2)
imp_var <- importance(modelo_v2)
varImportance <- data.frame(Variables = row.names(imp_var),
Importance = round(imp_var[,"MeanDecreaseGini"],2))
varImportance
rankImportance <- varImportance %>%
mutate(Rank = paste0('#', dense_rank(desc(Importance))))
rankImportance <- varImportance %>%
mutate(Rank = paste0('#', dense_rank(desc(Importance))))
ggplot(rankImportance,
aes(x = reorder(Variables, Importance),
y = Importance,
fill = Importance))+
geom_bar(stat = 'identity')+
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust = 0,
vjust = 0.55,
size = 4,
colour = 'red')+
labs(x = 'Variables')+
coord_flip()
ggplot(rankImportance,
aes(x = reorder(Variables, Importance),
y = Importance,
fill = Importance))+
geom_bar(stat = 'identity')+
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust = 0,
vjust = 0.55,
size = 4,
colour = 'red')+
labs(x = 'Variables')+
coord_flip()+
title("Ranking - Importancia das Variaveis")
ggplot(rankImportance,
aes(x = reorder(Variables, Importance),
y = Importance,
fill = Importance))+
geom_bar(stat = 'identity')+
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust = 0,
vjust = 0.55,
size = 4,
colour = 'red')+
labs(x = 'Variables')+
coord_flip()+
title(main = "Ranking - Importancia das Variaveis")
?title
ggplot(rankImportance,
aes(x = reorder(Variables, Importance),
y = Importance,
fill = Importance))+
geom_bar(stat = 'identity')+
title(main = "Ranking - Importancia das Variaveis")+
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust = 0,
vjust = 0.55,
size = 4,
colour = 'red')+
labs(x = 'Variables')+
coord_flip()
ggplot(rankImportance,
aes(x = reorder(Variables, Importance),
y = Importance,
fill = Importance))+
geom_bar(stat = 'identity')+
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust = 0,
vjust = 0.55,
size = 4,
colour = 'red')+
labs(x = 'Variables')+
coord_flip()
modelo_v3 <- randomForest(inadimplente ~ PAY_0 + PAY_2 + PAY_AMT1 + PAY_3 + PAY_AMT2 + PAY_4 + BILL_AMT1 + PAY_5,
data = dados_treino_bal)
modelo_v3 <- randomForest(inadimplente ~ PAY_0 + PAY_2 + PAY_AMT1 + PAY_3 + PAY_AMT2 + PAY_5 + BILL_AMT1,
data = dados_treino_bal)
modelo_v3
plot(modelo_v3) #grÃ¡fico da performance do modelo
previsoes_v3 <- predict(modelo_v3, dados_teste)
cm_v3 <- caret::confusionMatrix(previsoes_v3,
dados_teste$inadimplente,
positive = "1")
y <- dados_teste$inadimplente
y_pred_v3 <- previsoes_v3
precision_v3 <- posPredValue(y_pred_v3, y)
recall_v3 <- sensitivity(y_pred_v3, y)
F1_v3 <- (2 * precision_v3 * recall_v3) / (precision_v3 + recall_v3)
cm_v3 #Matriz de Confusao
precision_v3 #Precision
recall_v3 #Recall
F1_v3 #F1-score
tab_comparacao <- cbind(c(precision_v1, precision_v2, precision_v3),
c(recall_v1, recall_v2, recall_v3),
c(F1_v1, F1_v2, F1_v3))
colnames(tab_comparacao) <- c(Modelo_v1, Modelo_v2, Modelo_v3)
rownames(tab_comparacao) <- c(Precision, Recall, F1-score)
tab_comparacao <- cbind(c(precision_v1, precision_v2, precision_v3),
c(recall_v1, recall_v2, recall_v3),
c(F1_v1, F1_v2, F1_v3))
colnames(tab_comparacao) <- c("Modelo_v1", "Modelo_v2", "Modelo_v3")
rownames(tab_comparacao) <- c("Precision", "Recall", "F1-score")
tab_comparacao
cm_v1
cm_v2
cm_v3
saveRDS(modelo_v3, file = "modelo/modelo_v3.rds")
setwd("C:/Users/BRUNO/Google Drive/Estudos/PowerBI/Capitulo15")
saveRDS(modelo_v3, file = "modelo/modelo_v3.rds")
saveRDS(modelo_v3, file = "modelo_v3.rds")
saveRDS(modelo_v3, file = "modelo/modelo_v3.rds")
setwd("C:/Users/BRUNO/Google Drive/Estudos/PowerBI/Capitulo15")
dados_clientes <- read.csv("dados/dataset.csv")
dados_clientes$ID <- NULL #Exclui a coluna
colnames(dados_clientes)[24] <- "inadimplente" #renomeia a coluna
colnames(dados_clientes)[2] <- "Genero" #Sex
colnames(dados_clientes)[3] <- "Escolaridade" #Education
colnames(dados_clientes)[4] <- "Estado_Civil" #Marriage
colnames(dados_clientes)[5] <- "Idade" #Age
dados_clientes$Genero <- cut(dados_clientes$Genero, #variavel a ser convertida
c(0,1,2), #valores atuais da variavel
labels = c("Masculino", "Feminino"))
dados_clientes$Escolaridade <- cut(dados_clientes$Escolaridade,
c(0,1,2,3,4),
labels = c("Pos Graduado",
"Graduado",
"Ensino Medio",
"Outros"))
dados_clientes$Estado_Civil <- cut(dados_clientes$Estado_Civil,
c(-1,0,1,2,3),
labels = c("Desconhecido", #categoria dos nao identificados
"Casado",
"Solteiro",
"Outro"))
dados_clientes$Idade <- cut(dados_clientes$Idade,
c(0,30,50,100), #limites superiores das faixas etarias
labels = c("Jovem",
"Adulto",
"Idoso"))
dados_clientes$PAY_0 <- as.factor(dados_clientes$PAY_0)
dados_clientes$PAY_2 <- as.factor(dados_clientes$PAY_2)
dados_clientes$PAY_3 <- as.factor(dados_clientes$PAY_3)
dados_clientes$PAY_4 <- as.factor(dados_clientes$PAY_4)
dados_clientes$PAY_5 <- as.factor(dados_clientes$PAY_5)
dados_clientes$PAY_6 <- as.factor(dados_clientes$PAY_6)
dados_clientes <- na.omit(dados_clientes)
dados_clientes$inadimplente <- as.factor(dados_clientes$inadimplente)
set.seed(12345)
indice <- createDataPartition(dados_clientes$inadimplente, #seleciona a variavel filtro/target
p = 0.75, #indica a proporcao de dados de treino
list = FALSE)
dados_teste <- dados_clientes[-indice,]
dados_treino <- dados_clientes[indice,]
modelo_final <- readRDS("modelo/modelo_v3.rds")
previsoes <- predict(modelo_final, dados_teste$inadimplente)
library(Amelia)
library(ggplot2) #carregar antes do caret
library(lattice) #carregar antes do caret
library(caret)
library(dplyr)
library(reshape)
library(randomForest)
library(e1071)
dados_clientes <- read.csv("dados/dataset.csv")
dados_clientes$ID <- NULL #Exclui a coluna
colnames(dados_clientes)[24] <- "inadimplente" #renomeia a coluna
colnames(dados_clientes)[2] <- "Genero" #Sex
colnames(dados_clientes)[3] <- "Escolaridade" #Education
colnames(dados_clientes)[4] <- "Estado_Civil" #Marriage
colnames(dados_clientes)[5] <- "Idade" #Age
dados_clientes$Genero <- cut(dados_clientes$Genero, #variavel a ser convertida
c(0,1,2), #valores atuais da variavel
labels = c("Masculino", "Feminino"))
dados_clientes$Escolaridade <- cut(dados_clientes$Escolaridade,
c(0,1,2,3,4),
labels = c("Pos Graduado",
"Graduado",
"Ensino Medio",
"Outros"))
dados_clientes$Estado_Civil <- cut(dados_clientes$Estado_Civil,
c(-1,0,1,2,3),
labels = c("Desconhecido", #categoria dos nao identificados
"Casado",
"Solteiro",
"Outro"))
dados_clientes$Idade <- cut(dados_clientes$Idade,
c(0,30,50,100), #limites superiores das faixas etarias
labels = c("Jovem",
"Adulto",
"Idoso"))
dados_clientes$PAY_0 <- as.factor(dados_clientes$PAY_0)
dados_clientes$PAY_2 <- as.factor(dados_clientes$PAY_2)
dados_clientes$PAY_3 <- as.factor(dados_clientes$PAY_3)
dados_clientes$PAY_4 <- as.factor(dados_clientes$PAY_4)
dados_clientes$PAY_5 <- as.factor(dados_clientes$PAY_5)
dados_clientes$PAY_6 <- as.factor(dados_clientes$PAY_6)
dados_clientes <- na.omit(dados_clientes)
dados_clientes$inadimplente <- as.factor(dados_clientes$inadimplente)
set.seed(12345)
indice <- createDataPartition(dados_clientes$inadimplente, #seleciona a variavel filtro/target
p = 0.75, #indica a proporcao de dados de treino
list = FALSE)
dados_treino <- dados_clientes[indice,]
dados_teste <- dados_clientes[-indice,]
library(DMwR) #Carrega a biblioteca DMwR
set.seed(9560) #permite que o processo randomico seja reproduzido
dados_treino_bal <- SMOTE(inadimplente ~ ., data = dados_treino)
colnames(dados_treino_bal)
modelo_v3 <- randomForest(inadimplente ~ PAY_0 + PAY_2 + PAY_3 + PAY_AMT1 + PAY_AMT2 + PAY_5 + BILL_AMT1,
data = dados_treino_bal)
previsoes_v3 <- predict(modelo_v3, dados_teste)
cm_v3 <- caret::confusionMatrix(previsoes_v3,
dados_teste$inadimplente,
positive = "1")
y <- dados_teste$inadimplente
y_pred_v3 <- previsoes_v3
precision_v3 <- posPredValue(y_pred_v3, y)
recall_v3 <- sensitivity(y_pred_v3, y)
F1_v3 <- (2 * precision_v3 * recall_v3) / (precision_v3 + recall_v3)
cm_v3 #Matriz de Confusao
saveRDS(modelo_v3, file = "modelo/modelo_v3.rds")
gc()
modelo_final <- readRDS("modelo/modelo_v3.rds")
PAY_0 <- C(0,0,0)
PAY_2 <- C(0,0,0)
PAY_3 <- C(1,0,0)
PAY_AMT1 <- C(1100,1000,1200)
PAY_AMT2 <- C(1500,1300,1150)
PAY_5 <- C(0,0,0)
BILL_AMT1 <- C(0,0,0)
PAY_0 <- C(0,0,0)
modelo_final <- readRDS("modelo/modelo_v3.rds")
PAY_0 <- c(0,0,0)
PAY_2 <- c(0,0,0)
PAY_3 <- c(1,0,0)
PAY_AMT1 <- c(1100,1000,1200)
PAY_AMT2 <- c(1500,1300,1150)
PAY_5 <- c(0,0,0)
BILL_AMT1 <- c(0,0,0)
novos_clientes <- data.frame(PAY_1, PAY_2, PAY_3, PAY_AMT1, PAY_AMT2, PAY_5, BILL_AMT1)
novos_clientes <- data.frame(PAY_1, PAY_2, PAY_3, PAY_AMT1, PAY_AMT2,
PAY_5, BILL_AMT1)
novos_clientes <- data.frame(PAY_0, PAY_2, PAY_3, PAY_AMT1, PAY_AMT2, PAY_5, BILL_AMT1)
previsoes_novo_cleinte <- predict(modelo_final, novos_clientes)
previsoes_novo_cliente <- predict(modelo_final, novos_clientes)
View(novos_clientes)
View(modelo_final)
BILL_AMT1 <- c(350,420,280)
novos_clientes <- data.frame(PAY_0, PAY_2, PAY_3, PAY_AMT1, PAY_AMT2, PAY_5, BILL_AMT1)
View(novos_clientes)
previsoes_novo_cliente <- predict(modelo_final, novos_clientes)
novos_clientes$PAY_0 <- factor(novos_clientes$PAY_0, levels = levels(novos_clientes$PAY_0))
novos_clientes$PAY_2 <- factor(novos_clientes$PAY_2, levels = levels(novos_clientes$PAY_2))
novos_clientes$PAY_3 <- factor(novos_clientes$PAY_3, levels = levels(novos_clientes$PAY_3))
novos_clientes$PAY_5 <- factor(novos_clientes$PAY_5, levels = levels(novos_clientes$PAY_5))
previsoes_novo_cliente <- predict(modelo_final, novos_clientes)
str(novos_clientes)
library(Amelia)
library(ggplot2) #carregar antes do caret
library(lattice) #carregar antes do caret
library(caret)
library(dplyr)
library(reshape)
library(randomForest)
library(e1071)
dados_clientes$ID <- NULL #Exclui a coluna
colnames(dados_clientes)[24] <- "inadimplente" #renomeia a coluna
setwd("C:/Users/BRUNO/Google Drive/Estudos/PowerBI/Capitulo15")
library(Amelia)
library(ggplot2) #carregar antes do caret
library(lattice) #carregar antes do caret
library(caret)
library(dplyr)
library(reshape)
library(randomForest)
library(e1071)
dados_clientes <- read.csv("dados/dataset.csv")
dados_clientes$ID <- NULL #Exclui a coluna
colnames(dados_clientes)[24] <- "inadimplente" #renomeia a coluna
colnames(dados_clientes)[2] <- "Genero" #Sex
colnames(dados_clientes)[3] <- "Escolaridade" #Education
colnames(dados_clientes)[4] <- "Estado_Civil" #Marriage
colnames(dados_clientes)[5] <- "Idade" #Age
dados_clientes$Genero <- cut(dados_clientes$Genero, #variavel a ser convertida
c(0,1,2), #valores atuais da variavel
labels = c("Masculino", "Feminino"))
dados_clientes$Escolaridade <- cut(dados_clientes$Escolaridade,
c(0,1,2,3,4),
labels = c("Pos Graduado",
"Graduado",
"Ensino Medio",
"Outros"))
dados_clientes$Estado_Civil <- cut(dados_clientes$Estado_Civil,
c(-1,0,1,2,3),
labels = c("Desconhecido", #categoria dos nao identificados
"Casado",
"Solteiro",
"Outro"))
dados_clientes$Idade <- cut(dados_clientes$Idade,
c(0,30,50,100), #limites superiores das faixas etarias
labels = c("Jovem",
"Adulto",
"Idoso"))
dados_clientes$PAY_0 <- as.factor(dados_clientes$PAY_0)
dados_clientes$PAY_2 <- as.factor(dados_clientes$PAY_2)
dados_clientes$PAY_3 <- as.factor(dados_clientes$PAY_3)
dados_clientes$PAY_4 <- as.factor(dados_clientes$PAY_4)
dados_clientes$PAY_5 <- as.factor(dados_clientes$PAY_5)
dados_clientes$PAY_6 <- as.factor(dados_clientes$PAY_6)
dados_clientes <- na.omit(dados_clientes)
dados_clientes$inadimplente <- as.factor(dados_clientes$inadimplente)
set.seed(12345)
indice <- createDataPartition(dados_clientes$inadimplente, #seleciona a variavel filtro/target
p = 0.75, #indica a proporcao de dados de treino
list = FALSE)
dados_treino <- dados_clientes[indice,]
dados_teste <- dados_clientes[-indice,]
library(DMwR) #Carrega a biblioteca DMwR
set.seed(9560) #permite que o processo randomico seja reproduzido
dados_treino_bal <- SMOTE(inadimplente ~ ., data = dados_treino)
str(dados_treino_bal)
str(novos_clientes)
novos_clientes$PAY_0 <- factor(novos_clientes$PAY_0, levels = levels(dados_treino_bal$PAY_0))
novos_clientes$PAY_2 <- factor(novos_clientes$PAY_2, levels = levels(dados_treino_bal$PAY_2))
novos_clientes$PAY_3 <- factor(novos_clientes$PAY_3, levels = levels(dados_treino_bal$PAY_3))
novos_clientes$PAY_5 <- factor(novos_clientes$PAY_5, levels = levels(dados_treino_bal$PAY_5))
str(novos_clientes)
previsoes_novo_cliente <- predict(modelo_final, novos_clientes)
View(previsoes_novo_cliente)
ew(previsoes_novo_cliente)
View(previsoes_novo_cliente)
previsoes_novo_cliente <- predict(modelo_final, novos_clientes)
View(previsoes_novo_cliente)
str(novos_clientes)
previsoes_novo_cliente <- data.frame(previsoes_novo_cliente)
View(previsoes_novo_cliente)
novos_clientes$PAY_0 <- factor(novos_clientes$PAY_0, levels = levels(dados_treino_bal$PAY_0))
novos_clientes$PAY_2 <- factor(novos_clientes$PAY_2, levels = levels(dados_treino_bal$PAY_2))
novos_clientes$PAY_3 <- factor(novos_clientes$PAY_3, levels = levels(dados_treino_bal$PAY_3))
novos_clientes$PAY_5 <- factor(novos_clientes$PAY_5, levels = levels(dados_treino_bal$PAY_5))
str(novos_clientes)
previsoes_novo_cliente <- predict(modelo_final, novos_clientes)
previsoes_novo_cliente <- data.frame(previsoes_novo_cliente)
View(previsoes_novo_cliente)
setwd("C:/Users/BRUNO/Google Drive/Estudos/PowerBI/Capitulo15")
library(Amelia)
library(ggplot2) #carregar antes do caret
library(lattice) #carregar antes do caret
library(caret)
library(dplyr)
library(reshape)
library(randomForest)
library(e1071)
dados_clientes <- read.csv("dados/dataset.csv")
dados_clientes$ID <- NULL #Exclui a coluna
colnames(dados_clientes)[24] <- "inadimplente" #renomeia a coluna
colnames(dados_clientes)[2] <- "Genero" #Sex
colnames(dados_clientes)[3] <- "Escolaridade" #Education
colnames(dados_clientes)[4] <- "Estado_Civil" #Marriage
colnames(dados_clientes)[5] <- "Idade" #Age
dados_clientes$Genero <- cut(dados_clientes$Genero, #variavel a ser convertida
c(0,1,2), #valores atuais da variavel
labels = c("Masculino", "Feminino"))
dados_clientes$Escolaridade <- cut(dados_clientes$Escolaridade,
c(0,1,2,3,4),
labels = c("Pos Graduado",
"Graduado",
"Ensino Medio",
"Outros"))
dados_clientes$Estado_Civil <- cut(dados_clientes$Estado_Civil,
c(-1,0,1,2,3),
labels = c("Desconhecido", #categoria dos nao identificados
"Casado",
"Solteiro",
"Outro"))
dados_clientes$Idade <- cut(dados_clientes$Idade,
c(0,30,50,100), #limites superiores das faixas etarias
labels = c("Jovem",
"Adulto",
"Idoso"))
dados_clientes$PAY_0 <- as.factor(dados_clientes$PAY_0)
dados_clientes$PAY_2 <- as.factor(dados_clientes$PAY_2)
dados_clientes$PAY_3 <- as.factor(dados_clientes$PAY_3)
dados_clientes$PAY_4 <- as.factor(dados_clientes$PAY_4)
dados_clientes$PAY_5 <- as.factor(dados_clientes$PAY_5)
dados_clientes$PAY_6 <- as.factor(dados_clientes$PAY_6)
dados_clientes <- na.omit(dados_clientes)
dados_clientes$inadimplente <- as.factor(dados_clientes$inadimplente)
set.seed(12345)
indice <- createDataPartition(dados_clientes$inadimplente, #seleciona a variavel filtro/target
p = 0.75, #indica a proporcao de dados de treino
list = FALSE)
dados_treino <- dados_clientes[indice,]
dados_teste <- dados_clientes[-indice,]
library(DMwR) #Carrega a biblioteca DMwR
set.seed(9560) #permite que o processo randomico seja reproduzido
dados_treino_bal <- SMOTE(inadimplente ~ ., data = dados_treino)
modelo_final <- readRDS("modelo/modelo_v3.rds")
PAY_0 <- c(0,0,0)
PAY_2 <- c(0,0,0)
PAY_3 <- c(1,0,0)
PAY_AMT1 <- c(1100,1000,1200)
PAY_AMT2 <- c(1500,1300,1150)
PAY_5 <- c(0,0,0)
BILL_AMT1 <- c(350,420,280)
novos_clientes <- data.frame(PAY_0, PAY_2, PAY_3, PAY_AMT1, PAY_AMT2, PAY_5, BILL_AMT1)
novos_clientes$PAY_0 <- factor(novos_clientes$PAY_0, levels = levels(dados_treino_bal$PAY_0))
novos_clientes$PAY_2 <- factor(novos_clientes$PAY_2, levels = levels(dados_treino_bal$PAY_2))
novos_clientes$PAY_3 <- factor(novos_clientes$PAY_3, levels = levels(dados_treino_bal$PAY_3))
novos_clientes$PAY_5 <- factor(novos_clientes$PAY_5, levels = levels(dados_treino_bal$PAY_5))
previsoes_novo_cliente <- predict(modelo_final, novos_clientes)
previsoes_novo_cliente <- data.frame(previsoes_novo_cliente)
View(previsoes_novo_cliente)
View(previsoes_novo_cliente)
